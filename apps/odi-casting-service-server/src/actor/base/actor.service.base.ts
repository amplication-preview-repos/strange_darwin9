/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Actor as PrismaActor } from "@prisma/client";

export class ActorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ActorCountArgs, "select">): Promise<number> {
    return this.prisma.actor.count(args);
  }

  async actors<T extends Prisma.ActorFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ActorFindManyArgs>
  ): Promise<PrismaActor[]> {
    return this.prisma.actor.findMany<Prisma.ActorFindManyArgs>(args);
  }
  async actor<T extends Prisma.ActorFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ActorFindUniqueArgs>
  ): Promise<PrismaActor | null> {
    return this.prisma.actor.findUnique(args);
  }
  async createActor<T extends Prisma.ActorCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ActorCreateArgs>
  ): Promise<PrismaActor> {
    return this.prisma.actor.create<T>(args);
  }
  async updateActor<T extends Prisma.ActorUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ActorUpdateArgs>
  ): Promise<PrismaActor> {
    return this.prisma.actor.update<T>(args);
  }
  async deleteActor<T extends Prisma.ActorDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ActorDeleteArgs>
  ): Promise<PrismaActor> {
    return this.prisma.actor.delete(args);
  }
}
