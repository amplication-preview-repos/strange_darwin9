/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AuditionService } from "../audition.service";
import { AuditionCreateInput } from "./AuditionCreateInput";
import { Audition } from "./Audition";
import { AuditionFindManyArgs } from "./AuditionFindManyArgs";
import { AuditionWhereUniqueInput } from "./AuditionWhereUniqueInput";
import { AuditionUpdateInput } from "./AuditionUpdateInput";

export class AuditionControllerBase {
  constructor(protected readonly service: AuditionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Audition })
  async createAudition(
    @common.Body() data: AuditionCreateInput
  ): Promise<Audition> {
    return await this.service.createAudition({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Audition] })
  @ApiNestedQuery(AuditionFindManyArgs)
  async auditions(@common.Req() request: Request): Promise<Audition[]> {
    const args = plainToClass(AuditionFindManyArgs, request.query);
    return this.service.auditions({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Audition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async audition(
    @common.Param() params: AuditionWhereUniqueInput
  ): Promise<Audition | null> {
    const result = await this.service.audition({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Audition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAudition(
    @common.Param() params: AuditionWhereUniqueInput,
    @common.Body() data: AuditionUpdateInput
  ): Promise<Audition | null> {
    try {
      return await this.service.updateAudition({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Audition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAudition(
    @common.Param() params: AuditionWhereUniqueInput
  ): Promise<Audition | null> {
    try {
      return await this.service.deleteAudition({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
