/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Audition as PrismaAudition } from "@prisma/client";

export class AuditionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AuditionCountArgs, "select">): Promise<number> {
    return this.prisma.audition.count(args);
  }

  async auditions<T extends Prisma.AuditionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuditionFindManyArgs>
  ): Promise<PrismaAudition[]> {
    return this.prisma.audition.findMany<Prisma.AuditionFindManyArgs>(args);
  }
  async audition<T extends Prisma.AuditionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuditionFindUniqueArgs>
  ): Promise<PrismaAudition | null> {
    return this.prisma.audition.findUnique(args);
  }
  async createAudition<T extends Prisma.AuditionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuditionCreateArgs>
  ): Promise<PrismaAudition> {
    return this.prisma.audition.create<T>(args);
  }
  async updateAudition<T extends Prisma.AuditionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuditionUpdateArgs>
  ): Promise<PrismaAudition> {
    return this.prisma.audition.update<T>(args);
  }
  async deleteAudition<T extends Prisma.AuditionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuditionDeleteArgs>
  ): Promise<PrismaAudition> {
    return this.prisma.audition.delete(args);
  }
}
